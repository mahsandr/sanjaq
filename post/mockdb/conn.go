// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/conn.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	db "sanjaq/post/db"
)

// MockConn is a mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// DBConn mocks base method
func (m *MockConn) DBConn() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBConn")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// DBConn indicates an expected call of DBConn
func (mr *MockConnMockRecorder) DBConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBConn", reflect.TypeOf((*MockConn)(nil).DBConn))
}

// Get mocks base method
func (m *MockConn) Get(postIDs []uint64, limit uint16, offset uint64) ([]*db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", postIDs, limit, offset)
	ret0, _ := ret[0].([]*db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockConnMockRecorder) Get(postIDs, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConn)(nil).Get), postIDs, limit, offset)
}

// Insert mocks base method
func (m *MockConn) Insert(title, body string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", title, body)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockConnMockRecorder) Insert(title, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockConn)(nil).Insert), title, body)
}

// Delete mocks base method
func (m *MockConn) Delete(postID []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockConnMockRecorder) Delete(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConn)(nil).Delete), postID)
}
